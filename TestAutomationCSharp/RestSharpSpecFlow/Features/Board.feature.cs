// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestSharpSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create a Trello Board")]
    public partial class CreateATrelloBoardFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Board.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Create a Trello Board", "As a user of the Trello API\r\nI want to be able to create a new board\r\nSo that I c" +
                    "an organize my tasks effectively", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new Trello board")]
        public virtual void CreateANewTrelloBoard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new Trello board", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    testRunner.Given("I have a valid Trello API key and token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Parameter",
                            "Value"});
                table1.AddRow(new string[] {
                            "key",
                            "a5bfab77269c848d4a9458fe7a3449a9"});
                table1.AddRow(new string[] {
                            "token",
                            "ATTA92d124b3cee4c08870dbf6299eb06e300fcb9e4a6e80cbf3c263195ecc7985da20758DAC"});
                table1.AddRow(new string[] {
                            "name",
                            "RestSharp"});
                table1.AddRow(new string[] {
                            "defaultLists",
                            "true"});
#line 8
    testRunner.When("I send a POST request to the \"/1/boards/\" endpoint with the following data:", ((string)(null)), table1, "When ");
#line hidden
#line 14
    testRunner.Then("the response status code should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
    testRunner.And("the response should contain the created board\'s ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new Trello board with Multiple dataset")]
        [NUnit.Framework.TestCaseAttribute("a5bfab77269c848d4a9458fe7a3449a9", "ATTA92d124b3cee4c08870dbf6299eb06e300fcb9e4a6e80cbf3c263195ecc7985da20758DAC", "RestSharp", "true", "200", null)]
        [NUnit.Framework.TestCaseAttribute("a5bfab77269c848d4a9458fe7a3449a9", "ATTA92d124b3cee4c08870dbf6299eb06e300fcb9e4a6e80cbf3c263195ecc7985da20758DAC", "RestSharp", "false", "200", null)]
        [NUnit.Framework.TestCaseAttribute("invalidAPIKey", "ATTA92d124b3cee4c08870dbf6299eb06e300fcb9e4a6e80cbf3c263195ecc7985da20758DAC", "RestSharp", "true", "401", null)]
        [NUnit.Framework.TestCaseAttribute("a5bfab77269c848d4a9458fe7a3449a9", "invalidAPIToken", "RestSharp", "true", "401", null)]
        public virtual void CreateANewTrelloBoardWithMultipleDataset(string apiKey, string apiToken, string boardName, string defaultList, string statusCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("apiKey", apiKey);
            argumentsOfScenario.Add("apiToken", apiToken);
            argumentsOfScenario.Add("boardName", boardName);
            argumentsOfScenario.Add("defaultList", defaultList);
            argumentsOfScenario.Add("statusCode", statusCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new Trello board with Multiple dataset", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
    testRunner.Given("I have a valid Trello API key and token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Parameter",
                            "Value"});
                table2.AddRow(new string[] {
                            "key",
                            string.Format("{0}", apiKey)});
                table2.AddRow(new string[] {
                            "token",
                            string.Format("{0}", apiToken)});
                table2.AddRow(new string[] {
                            "name",
                            string.Format("{0}", boardName)});
                table2.AddRow(new string[] {
                            "defaultLists",
                            string.Format("{0}", defaultList)});
#line 19
    testRunner.When("I send a POST request to the \"/1/boards/\" endpoint with the following data:", ((string)(null)), table2, "When ");
#line hidden
#line 25
    testRunner.Then(string.Format("the response status code should be {0}", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.And("the response should contain the created board\'s ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
